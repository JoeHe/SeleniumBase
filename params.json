{"name":"SeleniumBase","tagline":"SeleniumBase Automation Framework","body":"## SeleniumBase Automation Framework [![Build Status](https://travis-ci.org/mdmintz/SeleniumBase.svg?branch=master)](https://travis-ci.org/mdmintz/SeleniumBase)\r\n\r\n### *(An open-source Python library that makes it easier to write reliable browser automation for testing and more...)*\r\n\r\n#### Features include:\r\n* [Python methods](https://github.com/mdmintz/SeleniumBase/blob/master/seleniumbase/fixtures/base_case.py) for quickly building [reliable WebDriver scripts](https://github.com/mdmintz/SeleniumBase/blob/master/examples/my_first_test.py).\r\n* [Plugins](https://github.com/mdmintz/SeleniumBase/tree/master/seleniumbase/plugins) for logging [data and screenshots](https://github.com/mdmintz/SeleniumBase/tree/master/examples/logs_for_test_fail) automatically.\r\n* Easy integration with [Selenium Grid](https://github.com/mdmintz/SeleniumBase/tree/master/integrations/selenium_grid), [MySQL](https://github.com/mdmintz/SeleniumBase/blob/master/seleniumbase/core/testcase_manager.py), [Docker](https://github.com/mdmintz/SeleniumBase/blob/master/integrations/docker/ReadMe.md), [Jenkins on Google Cloud](https://github.com/mdmintz/SeleniumBase/tree/master/integrations/google_cloud), and [Amazon S3](https://github.com/mdmintz/SeleniumBase/blob/master/seleniumbase/plugins/s3_logging_plugin.py).\r\n* Customizable with [command-line options](https://github.com/mdmintz/SeleniumBase/blob/master/conftest.py) and a [global configuration file](https://github.com/mdmintz/SeleniumBase/blob/master/seleniumbase/config/settings.py).\r\n\r\n##### *(Trusted by the world's most promising companies, including [HubSpot](http://www.hubspot.com/), [Jana](http://jana.com/), and [Veracode](http://www.veracode.com/). Learn how HubSpot uses SeleniumBase by reading: [Automated Testing with Selenium](http://dev.hubspot.com/blog/bid/88880/Automated-Integration-Testing-with-Selenium-at-HubSpot).)*\r\n\r\n\r\n### Part I: MAC SETUP INSTRUCTIONS\r\n####(WINDOWS users: You'll need to make a few modifications to the setup steps listed here. For starters, you won't be able to use the \"brew install\" command since that's MAC-only. Instead, download the requirements mentioned directly from the web. I'll provide you with links to save you time. You'll also want to put downloaded files into your [PATH](http://java.com/en/download/help/path.xml).)\r\n####(DOCKER users: If you want to run browser automation with Docker, see the [Docker ReadMe](https://github.com/mdmintz/SeleniumBase/blob/master/integrations/docker/ReadMe.md))\r\n\r\n#### **Step 0a:** Get basic requirements\r\n\r\nIf you don't already have ``python``, ``pip``, ``git``, and either ``virtualenv`` or ``virtualenvwrapper`` installed and accessible from your terminal (command prompt), you'll need to [follow these instructions](https://github.com/mdmintz/SeleniumBase/blob/master/help_docs/requirements_installation.md) to get those installed.\r\n\r\n\r\n#### **Step 0b:** Get web browsers to run automation on\r\n\r\nIf you haven't already, you'll want to [Download Firefox](https://www.mozilla.org/en-US/firefox/new/) and either [Download Chrome](https://www.google.com/chrome/browser/desktop/index.html) or [Download Chromium](https://download-chromium.appspot.com/).\r\n\r\n#### **Step 0c:** Get drivers for the web browsers that require them\r\n\r\nIf you want to run automation on browsers other than Firefox (such as Chrome), you'll need to download [Chromedriver](https://sites.google.com/a/chromium.org/chromedriver/) and [PhantomJS](http://phantomjs.org/) separately. (Firefox drivers are already included with Selenium by default)\r\n\r\nOn a Mac you can install those drivers more easily by using ``brew`` (aka ``homebrew``). You may have previously installed ``brew`` if you used that a few steps above to install ``git``.\r\n\r\nMac:\r\n```bash\r\nbrew install chromedriver phantomjs\r\n```\r\n\r\nWindows:\r\n* [Download Chromedriver](https://sites.google.com/a/chromium.org/chromedriver/downloads) and put it in your PATH.\r\n* OPTIONAL: [Download PhantomJS](https://bitbucket.org/ariya/phantomjs/downloads) (only if you want to run headless browser automation)\r\n* For everything you download, put those files in your PATH. (``Environmental Variables`` on a Windows machine)\r\n\r\n\r\n#### **Step 1:** Download or Clone SeleniumBase to your local machine\r\n\r\n```bash\r\ngit clone https://github.com/mdmintz/SeleniumBase.git\r\ncd SeleniumBase\r\n```\r\n\r\n(You can use a tool such as [SourceTree](http://www.sourcetreeapp.com/) to make things easier by providing you with a simple-to-use user interface for viewing and managing your git commits and status.)\r\n\r\nDepending on your Mac settings, some files may be hidden from view in your Finder window, such as ``.gitignore``. To view all files, run the following command and then reopen the Finder window:\r\n```bash\r\ndefaults write com.apple.finder AppleShowAllFiles -bool true\r\n```\r\n\r\n\r\n#### **Step 2:** Create a virtualenv for seleniumbase and activate it\r\n\r\nIf you're not sure how to create a virtual environment, [follow these instructions](https://github.com/mdmintz/SeleniumBase/blob/master/help_docs/virtualenv_instructions.md) to learn how.\r\n\r\n\r\n#### **Step 3:** Install necessary packages from the SeleniumBase folder and compile the test framework (from within your virtual environment)\r\n\r\n```bash\r\npip install -r requirements.txt\r\n```\r\n\r\n```bash\r\npython setup.py install\r\n```\r\n\r\nIf you wish to use the MySQL functionality with SeleniumBase to store test results and data in the database, you'll need to [follow these instructions](https://github.com/mdmintz/SeleniumBase/blob/master/help_docs/mysql_installation.md).\r\n\r\n\r\n#### **Step 4:** Verify that Selenium and Chromedriver were successfully installed by checking inside a python command prompt. (NOTE: xkcd is a webcomic)\r\n\r\n```bash\r\npython\r\n>>> from selenium import webdriver\r\n>>> browser = webdriver.Chrome()\r\n>>> browser.get(\"http://xkcd.com/1337/\")\r\n>>> browser.close()\r\n>>> exit()\r\n```\r\n\r\n\r\n#### **Step 5:** Verify that SeleniumBase was successfully installed by running the example test\r\n\r\nYou can verify the installation of SeleniumBase by running a simple script to perform basic actions such as navigating to a web page, clicking, waiting for page elements to appear, typing in text, scraping text on a page, and verifying text. This may be a good time to read up on CSS selectors. If you use Chrome, you can right-click on a page and select \"Inspect Element\" to see the details you need to create such a script. With CSS selectors, dots represent class names and pound signs represent IDs.\r\n\r\n```python\r\nfrom seleniumbase import BaseCase\r\n\r\nclass MyTestClass(BaseCase):\r\n\r\n    def test_basic(self):\r\n        self.open(\"http://xkcd.com/353/\")\r\n        self.wait_for_element(\"div#comic\")\r\n        self.click('a[rel=\"license\"]')\r\n        text = self.wait_for_element('center').text\r\n        self.assertTrue(\"reuse any of my drawings\" in text)\r\n        self.open(\"http://xkcd.com/1481/\")\r\n        self.click_link_text('Blag')\r\n        self.wait_for_text(\"The blag\", \"header h2\")\r\n        self.update_text(\"input#s\", \"Robots!\\n\")\r\n        self.wait_for_text(\"Hooray robots!\", \"#content\")\r\n        self.open(\"http://xkcd.com/1319/\")\r\n        self.wait_for_text(\"Automation\", \"div#ctitle\")\r\n```\r\n\r\nNow try running the script (from the \"examples\" folder) using various web browsers:\r\n\r\n```bash\r\nnosetests my_first_test.py --browser=chrome --with-selenium -s\r\n\r\nnosetests my_first_test.py --browser=phantomjs --with-selenium -s\r\n\r\nnosetests my_first_test.py --browser=firefox --with-selenium -s\r\n```\r\n\r\nAfter the test completes, in the console output you'll see a dot (``.``) on a new line, representing a passing test. (On test failures you'll see an ``F`` instead, and on test errors you'll see an ``E``). It looks more like a moving progress bar when you're running a ton of unit tests side by side. This is part of nosetests. After all tests complete (in this case there is only one), you'll see the \"``Ran 1 test in ...``\" line, followed by an \"``OK``\" if all nosetests passed.\r\n\r\nIf the example is moving too fast for your eyes to see what's going on, there are a few things you can do.\r\nYou can add ``--demo_mode`` on the command line, which pauses the browser for about a second (by default) after each action:\r\n\r\n```bash\r\nnosetests my_first_test.py --with-selenium -s --demo_mode\r\n```\r\n\r\nYou can override the default wait time by either updating [settings.py](https://github.com/mdmintz/SeleniumBase/blob/master/seleniumbase/config/settings.py) or by using ``--demo_sleep={NUM}`` when using Demo Mode. (NOTE: If you use ``--demo_sleep={NUM}`` without using ``--demo_mode``, nothing will happen.)\r\n\r\n```bash\r\nnosetests my_first_test.py --with-selenium -s --demo_mode --demo_sleep=1.2\r\n```\r\n\r\nYou can also add either of the following to your scripts to slow down the tests:\r\n\r\n```python\r\nimport time; time.sleep(5)  # sleep for 5 seconds (add this after the line you want to pause on)\r\nimport ipdb; ipdb.set_trace()  # waits for your command. n = next line of current method, c = continue, s = step / next executed line (will jump)\r\n```\r\n\r\n(NOTE: If you're using pytest instead of nosetests and you want to use ipdb in your script for debugging purposes, you'll either need to add \"--capture=no\" on the command line, or use \"import pytest; pytest.set_trace()\" instead of using ipdb. More info on that [here](http://stackoverflow.com/questions/2678792/can-i-debug-with-python-debugger-when-using-py-test-somehow).)\r\n\r\nYou may also want to have your test sleep in other situations where you need to have your test wait for something. If you know what you're waiting for, you should be specific by using a command that waits for something specific to happen.\r\n\r\nIf you need to debug things on the fly (in case of errors), use this line to run the code:\r\n\r\n```bash\r\nnosetests my_first_test.py --browser=chrome --with-selenium --pdb --pdb-failures -s\r\n```\r\n\r\nThe above code (with --pdb) will leave your browser window open in case there's a failure, which is possible if the web pages from the example change the data that's displayed on the page. (ipdb commands: 'c', 's', 'n' => continue, step, next).\r\n\r\nHere are some other useful nosetest arguments that you may want to append to your run commands:\r\n\r\n```bash\r\n--logging-level=INFO  # Hide DEBUG messages, which can be overwhelming.\r\n-x  # Stop running the tests after the first failure is reached.\r\n-v  # Prints the full test name rather than a dot for each test.\r\n--with-id  # If -v is also used, will number the tests for easy counting.\r\n```\r\n\r\nDue to high demand, pytest support has been added. You can run the above sample script in pytest like this:\r\n\r\n```bash\r\npy.test my_first_test.py --with-selenium --with-testing_base --browser=chrome -s\r\n\r\npy.test my_first_test.py --with-selenium --with-testing_base --browser=phantomjs -s\r\n\r\npy.test my_first_test.py --with-selenium --with-testing_base --browser=firefox -s\r\n```\r\n\r\n(NOTE: I'm currently adding more pytest plugins to catch up with nosetests. The latest one added is \"--with-testing_base\", which gives you full logging on test failures for screenshots, page source, and basic test info. Coming soon: The DB and S3 plugins, which are already available with nosetests.)\r\n\r\n#### **Step 6:** Complete the setup\r\n\r\nIf you're planning on using the full power of this test framework, there are a few more things you'll want to do:\r\n\r\n* Setup your [Jenkins](http://jenkins-ci.org/) build server for running your tests at regular intervals. (Or you can use any build server you want.)\r\n\r\n* Setup an [Amazon S3](http://aws.amazon.com/s3/) account for saving your log files and screenshots for future viewing. This test framework already has the code you need to connect to it. (Modify the s3_manager.py file from the seleniumbase/core folder with connection details to your instance.)\r\n\r\n* Install [MySQL Workbench](http://dev.mysql.com/downloads/tools/workbench/) to make life easier by giving you a nice GUI tool that you can use to read & write from your DB directly.\r\n\r\n* Setup your Selenium Grid and update your *.cfg file to point there. An example config file called selenium_server_config_example.cfg has been provided for you in the integrations/selenium_grid folder. The start-selenium-node.bat and start-selenium-server.sh files are for running your grid. In an example situation, your Selenium Grid server might live on a unix box and your Selenium Grid nodes might live on EC2 Windows virtual machines. When your build server runs a Selenium test, it would connect to your Selenium Grid to find out which Grid browser nodes are available to run that test. To simplify things, you can use [Browser Stack](https://www.browserstack.com/automate) as your entire Selenium Grid (and let them do all the fun work of maintaining the grid for you).\r\n\r\n* There are ways of running your tests from Jenkins without having to utilize a remote machine. One way is by using PhantomJS as your browser (it runs headlessly). Another way is by using Xvfb (another headless system). [There's a plugin for Xvfb in Jenkins](https://wiki.jenkins-ci.org/display/JENKINS/Xvfb+Plugin).\r\nIf you have Xvfb running in the background, you can add ``--headless`` to your run command in order to utilize it.\r\nHere are some more helpful resources I found regarding the use of Xvfb:\r\n1. http://stackoverflow.com/questions/6183276/how-do-i-run-selenium-in-xvfb\r\n2. http://qxf2.com/blog/xvfb-plugin-for-jenkins-selenium/\r\n3. http://stackoverflow.com/questions/27202131/firefox-started-by-selenium-ignores-the-display-created-by-pyvirtualdisplay\r\n\r\n* If you use [Slack](https://slack.com), you can easily have your Jenkins jobs display results there by using the [Jenkins Slack Plugin](https://github.com/jenkinsci/slack-plugin). Another way to send messages from your tests to Slack is by using [Slack's Incoming Webhooks API](https://api.slack.com/incoming-webhooks).\r\n\r\n* If you use [HipChat](https://www.hipchat.com/), you can easily have your Jenkins jobs display results there by using the [Jenkins HipChat Plugin](https://wiki.jenkins-ci.org/display/JENKINS/HipChat+Plugin). Another way is by using the hipchat_reporting plugin, which is included with this test framework.\r\n\r\n* Be sure to tell SeleniumBase to use these added features when you set them up. That's easy to do. You would be running tests like this:\r\n\r\n```bash\r\nnosetests [YOUR_TEST_FILE].py --browser=chrome --with-selenium --with-testing_base --with-basic_test_info --with-page_source --with-screen_shots --with-db_reporting --with-s3_logging -s\r\n```\r\n\r\n(When the testing_base plugin is used, if there's a test failure, the basic_test_info plugin records test logs, the page_source plugin records the page source of the last web page seen by the test, and the screen_shots plugin records the image of the last page seen by the test where the failure occurred. Make sure you always include testing_base whenever you include a plugin that logs test data. The db_reporting plugin records the status of all tests as long as you've setup your MySQL DB properly and you've also updated your seleniumbase/core/mysql_conf.py file with your DB credentials.)\r\nTo simplify that long run command, you can create a *.cfg file, such as the one provided in the example, and enter your plugins there so that you can run everything by typing:\r\n\r\n```bash\r\nnosetests [YOUR_TEST_FILE].py --config=[MY_CONFIG_FILE].cfg -s\r\n```\r\n\r\nSo much easier on the eyes :)\r\nYou can simplify that even more by using a setup.cfg file, such as the one provided for you in the examples folder. If you kick off a test run from within the folder that setup.cfg is location in, that file will automatically be used as your configuration, meaning that you wouldn't have to type out all the plugins that you want to use (or include a config file) everytime you run tests.\r\n\r\nIf you tell nosetests to run an entire file, it will run every method in that python file that starts with \"test\". You can be more specific on what to run by doing something like:\r\n\r\n```bash\r\nnosetests [YOUR_TEST_FILE].py:[SOME_CLASS_NAME].test_[SOME_TEST_NAME] --config=[MY_CONFIG_FILE].cfg -s\r\n```\r\n\r\nLet's try an example of a test that fails. Copy the following into a file called fail_test.py:\r\n```python\r\n\"\"\" test_fail.py \"\"\"\r\nfrom seleniumbase import BaseCase\r\n\r\nclass MyTestClass(BaseCase):\r\n\r\n    def test_find_army_of_robots_on_xkcd_desert_island(self):\r\n        self.open(\"http://xkcd.com/731/\")\r\n        self.wait_for_element(\"div#ARMY_OF_ROBOTS\", timeout=3)  # This should fail\r\n```\r\nNow run it:\r\n\r\n```bash\r\nnosetests test_fail.py --browser=chrome --with-selenium --with-testing_base --with-basic_test_info --with-page_source --with-screen_shots -s\r\n```\r\n\r\nYou'll notice that a logs folder was created to hold information about the failing test, and screenshots. Take a look at what you get. Remember, this data can be saved in your MySQL DB and in S3 if you include the necessary plugins in your run command (and if you set up the neccessary connections properly). For future test runs, past test results will get stored in the archived_logs folder.\r\n\r\nHave you made it this far? Congratulations!!! Now you're ready to dive in at full speed!\r\n\r\n\r\n### Part II: Detailed Method Specifications, Examples\r\n\r\n#### Navigating to a Page, Plus Some Other Useful Related Commands\r\n\r\n```python\r\nself.open(\"https://xkcd.com/378/\")  # Instant navigation to any web page.\r\n\r\nself.driver.refresh()  # refresh/reload the current page.\r\n\r\nwhere_am_i = self.driver.current_url  # this variable changes as the current page changes.\r\n\r\nsource = self.driver.page_source   # this variable changes as the page source changes.\r\n```\r\n\r\n**ProTip™:** You may need to use the page_source method along with Python's find() command to parse through the source to find something that Selenium wouldn't be able to. (You may want to brush up on your Python programming skills if you're confused.)\r\nEx:\r\n```python\r\nsource = self.driver.page_source\r\nfirst_image_open_tag = source.find('<img>')\r\nfirst_image_close_tag = source.find'</img>', first_image_open_tag)\r\neverything_inside_first_image_tags = source[first_image_open_tag+len('<img>'):first_image_close_tag]\r\n```\r\n\r\n#### Clicking\r\n\r\nTo click an element on the page:\r\n\r\n```python\r\nself.click(\"div#my_id\")\r\n```\r\n\r\n#### Asserting existance of an element on a page within some number of seconds:\r\n\r\n```python\r\nself.wait_for_element_present(\"div.my_class\", timeout=10)\r\n```\r\n\r\n#### Asserting visibility of an element on a page within some number of seconds:\r\n\r\n```python\r\nself.wait_for_element_visible(\"a.my_class\", timeout=5)\r\n```\r\n(NOTE: The short version of this is ``self.wait_for_element(ELEMENT)``)\r\n\r\nSince the line above returns the element, you can combine that with .click() as shown below:\r\n\r\n```python\r\nself.wait_for_element(\"a.my_class\", timeout=5).click()\r\n\r\n# But you're better off using the following statement, which does the same thing:\r\n\r\nself.click(\"a.my_class\")  # DO IT THIS WAY!\r\n```\r\n\r\n#### Asserting visibility of text inside an element on a page within some number of seconds:\r\n\r\n```python\r\nself.wait_for_text_visible(\"Make it so!\", \"div#trek div.picard div.quotes\", timeout=3)\r\nself.wait_for_text_visible(\"Tea. Earl Grey. Hot.\", \"div#trek div.picard div.quotes\", timeout=1)\r\n```\r\n(NOTE: The short version of this is ``self.wait_for_text(TEXT, ELEMENT)``)\r\n\r\n#### Asserting Anything\r\n\r\n```python\r\nself.assertTrue(myvar1 == something)\r\n\r\nself.assertEqual(var1, var2)\r\n```\r\n\r\n#### Useful Conditional Statements (with creative examples in action)\r\n\r\nis_element_visible(selector)  # is an element visible on a page\r\n```python\r\nimport logging\r\nif self.is_element_visible('div#warning'):\r\n    logging.debug(\"Red Alert: Something bad might be happening!\")\r\n```\r\n\r\nis_element_present(selector)  # is an element present on a page\r\n```python\r\nif self.is_element_present('div#top_secret img.tracking_cookie'):\r\n    self.contact_cookie_monster()  # Not a real method unless you define it somewhere\r\nelse:\r\n    current_url = self.driver.current_url\r\n    self.contact_the_nsa(url=current_url, message=\"Dark Zone Found\")  # Not a real method unless you define it somewhere\r\n```\r\nAnother example:\r\n```python\r\ndef is_there_a_cloaked_klingon_ship_on_this_page():\r\n    if self.is_element_present(\"div.ships div.klingon\"):\r\n        return not self.is_element_visible(\"div.ships div.klingon\")\r\n    return False\r\n```\r\n\r\nis_text_visible(text, selector)  # is text visible on a page\r\n```python\r\ndef get_mirror_universe_captain_picard_superbowl_ad(superbowl_year):\r\n    selector = \"div.superbowl_%s div.commercials div.transcript div.picard\" % superbowl_year\r\n    if self.is_text_visible(\"For the Love of Marketing and Earl Grey Tea!\", selector):\r\n        return \"Picard HubSpot Superbowl Ad 2015\"\r\n    elif self.is_text_visible(\"Delivery Drones... Engage\", selector):\r\n        return \"Picard Amazon Superbowl Ad 2015\"\r\n    elif self.is_text_visible(\"Bing it on Screen!\", selector):\r\n        return \"Picard Microsoft Superbowl Ad 2015\"\r\n    elif self.is_text_visible(\"OK Glass, Make it So!\", selector):\r\n        return \"Picard Google Superbowl Ad 2015\"\r\n    elif self.is_text_visible(\"Number One, I've Never Seen Anything Like It.\", selector):\r\n        return \"Picard Tesla Superbowl Ad 2015\"\r\n    elif self.is_text_visible(\"\"\"With the first link, the chain is forged.\r\n                              The first speech censored, the first thought forbidden,\r\n                              the first freedom denied, chains us all irrevocably.\"\"\", selector):\r\n        return \"Picard Wikimedia Superbowl Ad 2015\"\r\n    elif self.is_text_visible(\"Let us make sure history never forgets the name ... Facebook\", selector):\r\n        return \"Picard Facebook Superbowl Ad 2015\"\r\n    else:\r\n        raise Exception(\"Reports of my assimilation are greatly exaggerated.\")\r\n```\r\n\r\n#### Typing Text\r\n\r\nupdate_text(selector, text)  # updates the text from the specified element with the specified value. Exception raised if element missing or field not editable. Example:\r\n\r\n```python\r\nself.update_text(\"input#id_value\", \"2012\")\r\n```\r\n\r\nYou can also use the WebDriver .send_keys() command, but it won't clear the text box first if there's already text inside.\r\nIf you want to type in special keys, that's easy too. Here's an example:\r\n\r\n```python\r\nfrom selenium.webdriver.common.keys import Keys\r\nself.wait_for_element(\"textarea\").send_keys(Keys.SPACE + Keys.BACK_SPACE + '\\n')  # the backspace should cancel out the space, leaving you with the newline\r\n```\r\n\r\n#### Switching Tabs\r\n\r\nWhat if your test opens up a new tab/window and now you have more than one page? No problem. You need to specify which one you currently want Selenium to use. Switching between tabs/windows is easy:\r\nEx:\r\n\r\n```python\r\nself.driver.switch_to_window(self.driver.window_handles[1])  # this switches to the new tab\r\n```\r\n\r\ndriver.window_handles is a list that will continually get updated when new windows/tabs appear (index numbering is auto-incrementing from 0, which represents the main window)\r\n\r\n**ProTip™:** iFrames follow the same principle as new windows - you need to specify the iFrame if you want to take action on something in there\r\nEx:\r\n\r\n```python\r\nself.driver.switch_to_frame('ContentManagerTextBody_ifr')\r\n# Now you can act inside the iFrame\r\n# Do something cool (here)\r\nself.driver.switch_to_default_content()  # exit the iFrame when you're done\r\n```\r\n\r\n#### Handle Pop-Up Alerts\r\n\r\nWhat if your test makes an alert pop up in your browser? No problem. You need to switch to it and either accept it or dismiss it:\r\nEx:\r\n\r\n```python\r\nself.wait_for_and_accept_alert()\r\n\r\nself.wait_for_and_dismiss_alert()\r\n```\r\n\r\nIf you're not sure whether there's an alert before trying to accept or dismiss it, one way to handle that is to wrap your alert-handling code in a try/except block. Other methods such as .text and .send_keys() will also work with alerts.\r\n\r\n#### Executing Custom jQuery Scripts:\r\n\r\njQuery is a powerful JavaScript library that allows you to perform advanced actions in a web browser.\r\nIf the web page you're on already has jQuery loaded, you can start executing jQuery scripts immediately.\r\nYou'd know this because the web page would contain something like the following in the HTML:\r\n\r\n```html\r\n<script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js\"></script>\r\n```\r\n\r\nIt's OK if you want to use jQuery on a page that doesn't have it loaded yet. To do so, run the following command first:\r\n\r\n```python\r\nself.activate_jquery()\r\n```\r\n\r\nHere are some examples of using jQuery in your scripts:\r\n```python\r\nself.execute_script('jQuery, window.scrollTo(0, 600)')  # Scrolling the page\r\n\r\nself.execute_script(\"jQuery('#annoying-widget').hide()\")  # Hiding elements on a page\r\n\r\nself.execute_script(\"jQuery('#annoying-button a').remove()\")  # Removing elements on a page\r\n\r\nself.execute_script(\"jQuery('%s').mouseover()\" % (mouse_over_item))  # Mouse-over elements on a page\r\n\r\nself.execute_script(\"jQuery('input#the_id').val('my_text')\")  # Fast text input on a page\r\n\r\nself.execute_script(\"jQuery('div#dropdown a.link').click()\")  # Click elements on a page\r\n\r\nself.execute_script(\"return jQuery('div#amazing')[0].text\")  # Returns the css \"text\" of the element given\r\n\r\nself.execute_script(\"return jQuery('textarea')[2].value\")  # Returns the css \"value\" of the 3rd textarea element on the page\r\n```\r\n\r\nIn the following example, javascript is used to plant code on a page that Selenium can then touch after that:\r\n```python\r\nself.open(SOME_PAGE_TO_PLAY_WITH)\r\nreferral_link = '<a class=\"analytics test\" href=\"%s\">Free-Referral Button!</a>' % DESTINATION_URL\r\nself.execute_script(\"document.body.innerHTML = \\\"%s\\\"\" % referral_link)\r\nself.click(\"a.analytics\")  # Clicks the generated button\r\n```\r\n\r\n### Part III: More Details\r\n\r\nNosetests automatically runs any python method that starts with \"test\" from the file you selected. You can also select specific tests to run from files or classes. For example, the code in the early examples could've been run using \"nosetests my_first_test.py:MyTestClass.test_basic ... ...\". If you wanted to run all tests in MyTestClass, you can use: \"nosetests my_first_test.py:MyTestClass ... ...\", which is useful when you have multiple tests in the same file. Don't forget the plugins. Use \"-s\" if you want better logging in the console output.\r\n\r\nTo use the SeleniumBase Test Framework calls, don't forget to include the following import:\r\n\r\n```python\r\nfrom seleniumbase import BaseCase\r\n```\r\n\r\nAnd you'll need to inherit BaseCase in your classes like so:\r\n\r\n```python\r\nclass MyTestClass(BaseCase):\r\n```\r\n\r\n####  Checking Email: \r\nLet's say you have a test that sends an email, and now you want to check that the email was received:\r\n\r\n```python\r\nfrom seleniumbase.fixtures.email_manager import EmailManager, EmailException\r\nnum_email_results = 0\r\nemail_subject = \"This is the subject to search for (maybe include a timestamp)\"\r\nemail_manager = EmailManager(\"[YOUR SELENIUM GMAIL EMAIL ADDRESS]\")  # the password for this is elsewhere (in the library) because this is a default email account\r\ntry:\r\n    html_text = email_manager.search(SUBJECT=\"%s\" % email_subject, timeout=300)\r\n    num_email_results = len(html_text)\r\nexcept EmailException:\r\n    num_email_results = 0\r\nself.assertTrue(num_email_results)  # true if not zero\r\n```\r\n\r\nNow you can parse through the email if you're looking for specific text or want to navigate to a link listed there.\r\n\r\n\r\n####  Database Powers: \r\nLet's say you have a test that needs to access the database. First make sure you already have a table ready. Then try this example:\r\n\r\n```python\r\nfrom seleniumbase.core.mysql import DatabaseManager\r\ndef write_data_to_db(self, theId, theValue, theUrl):\r\n    db = DatabaseManager()\r\n    query = \"\"\"INSERT INTO myTable(theId,theValue,theUrl)\r\n               VALUES (%(theId)s,%(theValue)s,%(theUrl)s)\"\"\"\r\n    db.execute_query_and_close(query, {\"theId\":theId,\r\n                               \"theValue\":theValue,\r\n                               \"theUrl\":theUrl})\r\n```\r\n\r\nAccess credentials are stored in your library file for your convenience (you have to add them first).\r\n\r\nThe following example below (taken from the Delayed Data Manager) shows how data can be pulled from the database.\r\n\r\n```python\r\nimport logging\r\nfrom seleniumbase.core.mysql import DatabaseManager\r\n\r\ndef get_delayed_test_data(self, testcase_address, done=0):\r\n    \"\"\" Returns a list of rows \"\"\"\r\n    db = DatabaseManager()\r\n    query = \"\"\"SELECT guid,testcaseAddress,insertedAt,expectedResult,done\r\n               FROM delayedTestData\r\n               WHERE testcaseAddress=%(testcase_address)s\r\n               AND done=%(done)s\"\"\"\r\n    data = db.fetchall_query_and_close(query, {\"testcase_address\":testcase_address, \"done\":done})\r\n    if data:\r\n        return data\r\n    else:\r\n        logging.debug(\"Could not find any rows in delayedTestData.\")\r\n        logging.debug(\"DB Query = \" + query % {\"testcase_address\":testcase_address, \"done\":done})\r\n        return []\r\n```\r\n\r\nNow you know how to pull data from your MySQL DB.\r\n\r\nYou may also be wondering when you would use the Delayed Data Manager. Here's one example: If you scheduled an email to go out 12 hours from now and you wanted to check that the email gets received (but you don't want the Selenium test of a Jenkins job to sit idle for 12 hours) you can store the email credentials as a unique time-stamp for the email subject in the DB (along with a time for when it's safe for the email to be searched for) and then a later-running test can do the checking after the right amount of time has passed.\r\n\r\n\r\nCongratulations! If you've made it this far, it means you have a pretty good idea about how to move forward!\r\nFeel free to check out other exciting open source projects on GitHub:\r\n[https://github.com/hubspot](https://github.com/hubspot)\r\n\r\nHappy Automating!\r\n\r\n~ Michael Mintz (https://github.com/mdmintz)\r\n\r\n\r\n### Legal Disclaimer\r\nAutomation is a powerful thing. It allows you to take full control of web browsers and do almost anything that a human could do, but faster. It can be used for both good and evil. With great power comes great responsibility. You are fully responsible for how you use this framework and the automation that you create. You may also want to see a professional when it comes to setting up your automation environment if you require assistance.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}